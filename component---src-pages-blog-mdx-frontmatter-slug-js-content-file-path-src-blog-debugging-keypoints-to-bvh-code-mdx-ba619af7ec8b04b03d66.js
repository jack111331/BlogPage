"use strict";(self.webpackChunkblogs=self.webpackChunkblogs||[]).push([[972],{4487:function(n,a,s){s.r(a),s.d(a,{Head:function(){return k},default:function(){return m}});var t=s(7849),e=s(4362);function o(n){const a=Object.assign({h1:"h1",p:"p",a:"a",span:"span"},(0,t.RP)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.h1,null,"Preliminary"),"\n",e.createElement(a.p,null,"Recently, as the text-to-motion generation research becomes popular, approaches to apply them in various domains remain unexplored."),"\n",e.createElement(a.p,null,"One direct application is to retarget the generated motion to existing agents. In ",e.createElement(a.a,{href:"https://github.com/EricGuo5513/momask-codes"},"MoMask's code"),", they provide a tool to convert the generated motion's keypoint to BioVision Motion Capture (BVH) format.\nThis tool allows us to convert the generated motion representation to the format that is widely adopted by industries."),"\n",e.createElement(a.p,null,"However, there are artifacts appear in the converted motion format, such as twisted foot after turning around, wrongly oriented head, and temporally-inconsistent motion.\nTo address this issue, it is required to closely inspect the code and fix it to present a visually more pleasing motion visualization result."),"\n",e.createElement(a.h1,null,"Analysis"),"\n",e.createElement(a.p,null,"MoMask implemented the conversion using the following steps for each frame.\nFirst, they ",e.createElement(a.a,{href:"https://github.com/EricGuo5513/momask-codes/blob/main/visualization/joints2bvh.py#L49"},"extract keypoints")," from the generated motion representation, which is composed of body joints' position, velocity, and rotation information. Note that the reason why they only extract position information is because they don't want the imprecise predicted rotation information to interfere the conversion results."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre style="counter-reset: linenumber NaN" class="language-python line-numbers"><code class="language-python">    positions <span class="token operator">=</span> positions<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>re_order<span class="token punctuation">]</span>\n    new_anim <span class="token operator">=</span> self<span class="token punctuation">.</span>template<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    new_anim<span class="token punctuation">.</span>rotations <span class="token operator">=</span> Quaternions<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">(</span>positions<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    new_anim<span class="token punctuation">.</span>positions <span class="token operator">=</span> new_anim<span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>positions<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>\n    new_anim<span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> positions<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span></code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(a.p,null,"Second, they ",e.createElement(a.a,{href:"https://github.com/EricGuo5513/momask-codes/blob/main/visualization/InverseKinematics.py#L66C1-L108C30"},"calculate inverse kinematic")," of the extracted keypoints to match the pre-defined bone structure."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre style="counter-reset: linenumber NaN" class="language-python line-numbers"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n        children <span class="token operator">=</span> AnimationStructure<span class="token punctuation">.</span>children_list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>parents<span class="token punctuation">)</span>\n\n        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n            <span class="token keyword">for</span> j <span class="token keyword">in</span> AnimationStructure<span class="token punctuation">.</span>joints<span class="token punctuation">(</span>self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>parents<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n                c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>\n\n                anim_transforms <span class="token operator">=</span> Animation<span class="token punctuation">.</span>transforms_global<span class="token punctuation">(</span>self<span class="token punctuation">.</span>animation<span class="token punctuation">)</span>\n                anim_positions <span class="token operator">=</span> anim_transforms<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n                anim_rotations <span class="token operator">=</span> Quaternions<span class="token punctuation">.</span>from_transforms<span class="token punctuation">(</span>anim_transforms<span class="token punctuation">)</span>\n\n                jdirs <span class="token operator">=</span> anim_positions<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">-</span> anim_positions<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> j<span class="token punctuation">]</span>\n                ddirs <span class="token operator">=</span> self<span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">-</span> anim_positions<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">,</span> j<span class="token punctuation">]</span>\n\n                jsums <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>jdirs <span class="token operator">**</span> <span class="token number">2.0</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e-10</span>\n                dsums <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>ddirs <span class="token operator">**</span> <span class="token number">2.0</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e-10</span>\n\n                jdirs <span class="token operator">=</span> jdirs <span class="token operator">/</span> jsums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>\n                ddirs <span class="token operator">=</span> ddirs <span class="token operator">/</span> dsums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span>\n\n                angles <span class="token operator">=</span> np<span class="token punctuation">.</span>arccos<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>jdirs <span class="token operator">*</span> ddirs<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                axises <span class="token operator">=</span> np<span class="token punctuation">.</span>cross<span class="token punctuation">(</span>jdirs<span class="token punctuation">,</span> ddirs<span class="token punctuation">)</span>\n                axises <span class="token operator">=</span> <span class="token operator">-</span>anim_rotations<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span> <span class="token operator">*</span> axises\n\n                rotations <span class="token operator">=</span> Quaternions<span class="token punctuation">.</span>from_angle_axis<span class="token punctuation">(</span>angles<span class="token punctuation">,</span> axises<span class="token punctuation">)</span>\n\n                <span class="token keyword">if</span> rotations<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>\n                    averages <span class="token operator">=</span> rotations<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>\n                <span class="token keyword">else</span><span class="token punctuation">:</span>\n                    averages <span class="token operator">=</span> Quaternions<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>rotations<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n                self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>rotations<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>animation<span class="token punctuation">.</span>rotations<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">*</span> averages\n\n            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>silent<span class="token punctuation">:</span>\n                anim_positions <span class="token operator">=</span> Animation<span class="token punctuation">.</span>positions_global<span class="token punctuation">(</span>self<span class="token punctuation">.</span>animation<span class="token punctuation">)</span>\n                error <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>anim_positions <span class="token operator">-</span> self<span class="token punctuation">.</span>positions<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2.0</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span>\n                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'[BasicInverseKinematics] Iteration %i Error: %f\'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>animation</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}),"\n",e.createElement(a.p,null,"However, the keypoints are ill-defined along roll axis.\nAs a result, the converted BVH format, which contains each joint's rotation, seems egregious."),"\n",e.createElement(a.h1,null,"Solution"),"\n",e.createElement(a.p,null,"To address this issue, stablizing the roll axis of each joint is necessary.\nAlthough it seems easy that I just have to zero out all the roll axis, the essence of joint transformation from local joint space to global world space makes things complicated.\nAs the rotation order matters, the effect of modifying the joint's roll axis in local space is not equal to modifying it in global space."),"\n",e.createElement(a.p,null,"After searching on the Internet how others handle such a problem, I found a keyword: Swing-Twist decomposition.\nSwing-twist decomposition is widely adopted in gaming industry for controlling character animation in a more intuitive way.\nIt works by decomposing a quaternion to a swing and twist components given an axis, so animators can easily interpolate character animation smoothly with either one components.\nI found it useful for our situation, since our goal of fixing global roll axis can be easily done by stablizing the twist component of each joint."),"\n",e.createElement(a.p,null,"The pseudo code is provided below and will release after my text-to-motion generation work submitted to SIGGRAPH ASIA published."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre style="counter-reset: linenumber NaN" class="language-text line-numbers"><code class="language-text">for each joint:\n    twist_axis = [0, 1, 0] # bone\'s roll is defined in Y-axis\n    twist_rotation = local_joint_rotation.twist(twist_axis)\n    swing_rotation = local_joint_rotation * twist_rotation.inverse()\n    Get temporally-smoothed frames using exponential moving average over frames\n    local_joint_rotation = swing_rotation * smoothed_twist_rotation</code><span aria-hidden="true" class="line-numbers-rows" style="white-space: normal; width: auto; left: 0;"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>'}}))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.RP)(),n.components);return a?e.createElement(a,n,e.createElement(o,n)):o(n)},c=s(9277),i=s(7528),u=s(4627);const r={},l=n=>{let{data:a,children:s}=n;return e.createElement("div",{style:{backgroundColor:"#27272a",color:"d4d4d8"}},e.createElement(c.A),e.createElement(u.A,{data:a},e.createElement(t.xA,{components:r},s)))},k=n=>{let{data:a}=n;return e.createElement(i.A,{title:a.mdx.frontmatter.title})};function m(n){return e.createElement(l,n,e.createElement(p,n))}},4627:function(n,a,s){s.d(a,{A:function(){return C}});var t={};s.r(t),s.d(t,{abc:function(){return i},alert:function(){return u},blobNum:function(){return r},code:function(){return l},flowChart:function(){return k},geo:function(){return m},gist:function(){return d},graph:function(){return f},graphviz:function(){return h},gutter:function(){return b},lineData:function(){return g},lineNumbers:function(){return w},linenumber:function(){return y},markdownBody:function(){return v},mermaid:function(){return E},night:function(){return _},noList:function(){return x},note_selected:function(){return j},pre:function(){return N},sectionTitle:function(){return O},sequenceDiagram:function(){return A},titleText:function(){return S},vega:function(){return P},wrap:function(){return I},wrapper:function(){return T}});var e=s(4362),o=s(4810);var p=n=>{let{data:a}=n;return console.log(a),e.createElement("header",{className:"header-module--header--88d67"},e.createElement("h1",null,e.createElement(o.N_,{className:"header-module--title--fd056"},a.mdx.frontmatter.title),e.createElement("p",null,"Published on ",a.mdx.frontmatter.date)))};var c=()=>e.createElement("footer",{className:"footer-module--footer--1e85b"},"© ",(new Date).getFullYear()," by Edge"),i="markdown-module--abc--9ce8a",u="markdown-module--alert--8fd4b",r="markdown-module--blob-num--68e1b",l="markdown-module--code--35af0",k="markdown-module--flow-chart--870cf",m="markdown-module--geo--7972d",d="markdown-module--gist--58f83",f="markdown-module--graph--d741e",h="markdown-module--graphviz--5a6cf",b="markdown-module--gutter--89b4f",g="markdown-module--line-data--9815e",w="markdown-module--line-numbers--e513b",y="markdown-module--linenumber--45694",v="markdown-module--markdown-body--20d56",E="markdown-module--mermaid--41992",_="markdown-module--night--06488",x="markdown-module--no-list--4fbac",j="markdown-module--note_selected--69afc",N="markdown-module--pre--90cb9",O="markdown-module--sectionTitle--0140d",A="markdown-module--sequence-diagram--d4256",S="markdown-module--titleText--01b56",P="markdown-module--vega--4157a",I="markdown-module--wrap--ed9e3",T="markdown-module--wrapper--81a2d";var C=n=>{let{data:a,children:s}=n;return console.log(t),e.createElement(e.Fragment,null,e.createElement("div",{className:"layout-module--container--31614"},e.createElement(p,{data:a}),e.createElement("main",{className:v},e.createElement("div",{className:N},s)),e.createElement(c,null)))}},7528:function(n,a,s){var t=s(4362),e=s(4810);a.A=n=>{let{title:a}=n;const s=(0,e.GR)("3159585216");return t.createElement("title",null,a," | ",s.site.siteMetadata.title)}},7849:function(n,a,s){s.d(a,{RP:function(){return u},xA:function(){return l}});var t=s(4362);function e(n){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},e(n)}function o(n,a){var s=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(n,a).enumerable}))),s.push.apply(s,t)}return s}function p(n){for(var a=1;a<arguments.length;a++){var s=null!=arguments[a]?arguments[a]:{};a%2?o(Object(s),!0).forEach((function(a){c(n,a,s[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(s)):o(Object(s)).forEach((function(a){Object.defineProperty(n,a,Object.getOwnPropertyDescriptor(s,a))}))}return n}function c(n,a,s){return(a=function(n){var a=function(n,a){if("object"!=e(n)||!n)return n;var s=n[Symbol.toPrimitive];if(void 0!==s){var t=s.call(n,a||"default");if("object"!=e(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===a?String:Number)(n)}(n,"string");return"symbol"==e(a)?a:a+""}(a))in n?Object.defineProperty(n,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):n[a]=s,n}var i=t.createContext({});function u(n){var a=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(a):p(p({},a),n)}),[a,n])}var r={};function l(n){var a,s=n.components,e=n.children;return a=n.disableParentContext?"function"==typeof s?s({}):s||r:u(s),t.createElement(i.Provider,{value:a},e)}},9277:function(n,a,s){s.d(a,{A:function(){return p}});var t=s(4362),e=s(4810),o="navbar-module--nav-link-item--08ec8";var p=n=>t.createElement("div",{className:"navbar-module--navbar--fb12b"},t.createElement("div",{className:"navbar-module--container--3089d"},t.createElement("ul",{className:"navbar-module--nav-links--79b0c"},t.createElement(e.N_,{to:"/",className:o},"Home"),t.createElement(e.N_,{to:"/ongoing_render",className:o},"Render testbed"),t.createElement(e.N_,{to:"/blog",className:o},"Blog"))))}}]);
//# sourceMappingURL=component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-src-blog-debugging-keypoints-to-bvh-code-mdx-ba619af7ec8b04b03d66.js.map